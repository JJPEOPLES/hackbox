# Complete Dockerfile with VNC support for Render.com

# Build stage for client
FROM node:18 AS client-builder

WORKDIR /app/client

# Copy client package.json files
COPY client/package*.json ./

# Install all client dependencies including dev dependencies
RUN npm install

# Copy client source code
COPY client ./

# Build client with increased memory limit for local build
RUN NODE_OPTIONS="--max_old_space_size=8192" npm run build

# Build stage for server
FROM node:18 AS server-builder

WORKDIR /app/server

# Copy server package.json files
COPY server/package*.json ./

# Install build dependencies for node-pty
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    && ln -s /usr/bin/python3 /usr/bin/python

# Install all server dependencies
RUN npm install

# Copy server source code
COPY server/ ./

# Final stage with VNC support
FROM ubuntu:22.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install Node.js
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean

# Install XFCE, xrdp, SSH, and required tools
RUN apt-get update && apt-get install -y \
    xfce4 \
    xfce4-terminal \
    xfce4-goodies \
    xrdp \
    openssh-server \
    net-tools \
    supervisor \
    nano \
    wget \
    curl \
    firefox \
    python3 \
    python3-pip \
    make \
    g++ \
    dbus-x11 \
    libxfont2 \
    xfonts-base \
    xauth \
    x11-utils \
    fonts-dejavu \
    fonts-liberation \
    tomcat9 \
    tomcat9-admin \
    tomcat9-common \
    tomcat9-user \
    && apt-get clean

# Add universe repository to get all dependencies
RUN apt-get update && apt-get install -y software-properties-common && \
    add-apt-repository universe && \
    apt-get update

# Install Guacamole dependencies with fallback options
RUN apt-get update && \
    # Try to install all dependencies, but continue even if some fail
    apt-get install -y --no-install-recommends \
    libcairo2-dev \
    libjpeg-turbo8-dev || apt-get install -y libjpeg62-turbo-dev || apt-get install -y libjpeg-dev

RUN apt-get install -y --no-install-recommends \
    libpng-dev \
    libossp-uuid-dev || apt-get install -y uuid-dev

RUN apt-get install -y --no-install-recommends \
    libfreerdp-dev || apt-get install -y freerdp2-dev || apt-get install -y freerdp-dev

RUN apt-get install -y --no-install-recommends \
    libpango1.0-dev \
    libssh2-1-dev \
    libtelnet-dev || apt-get install -y libtelnet2-dev || true

RUN apt-get install -y --no-install-recommends \
    libvncserver-dev \
    libpulse-dev \
    libssl-dev \
    libvorbis-dev \
    libwebp-dev \
    && apt-get clean

# Download and install Guacamole server with more resilient configuration
RUN mkdir -p /opt/guacamole && \
    cd /opt && \
    wget -q "https://downloads.apache.org/guacamole/1.4.0/source/guacamole-server-1.4.0.tar.gz" && \
    tar -xzf guacamole-server-1.4.0.tar.gz && \
    cd guacamole-server-1.4.0 && \
    # Configure with minimal options to ensure it builds
    ./configure --with-init-dir=/etc/init.d \
                --disable-guacenc \
                --disable-guacd \
                --disable-guaclog \
                --disable-pulse \
                --disable-vorbis \
                --disable-vnc \
                --disable-webp \
                --disable-ssh \
                --disable-telnet \
                --enable-rdp && \
    make && \
    make install && \
    ldconfig && \
    cd .. && \
    rm -rf guacamole-server-1.4.0 guacamole-server-1.4.0.tar.gz

# Install guacd from package if the build fails
RUN if [ ! -f /usr/local/sbin/guacd ]; then \
        apt-get update && \
        apt-get install -y guacd || echo "Failed to install guacd package, will use alternative approach"; \
    fi

# Download and install Guacamole client with fallbacks
RUN mkdir -p /var/lib/tomcat9/webapps && \
    (wget -q "https://downloads.apache.org/guacamole/1.4.0/binary/guacamole-1.4.0.war" -O /var/lib/tomcat9/webapps/guacamole.war || \
     wget -q "https://archive.apache.org/dist/guacamole/1.4.0/binary/guacamole-1.4.0.war" -O /var/lib/tomcat9/webapps/guacamole.war || \
     wget -q "https://archive.apache.org/dist/guacamole/1.3.0/binary/guacamole-1.3.0.war" -O /var/lib/tomcat9/webapps/guacamole.war || \
     echo "Failed to download Guacamole WAR file") && \
    mkdir -p /etc/guacamole

# Try to install Guacamole from package if download fails
RUN if [ ! -s /var/lib/tomcat9/webapps/guacamole.war ]; then \
        apt-get update && \
        apt-get install -y guacamole guacamole-tomcat || echo "Failed to install guacamole package"; \
    fi

# Configure Guacamole with simplified settings
RUN mkdir -p /etc/guacamole && \
    echo "guacd-hostname: localhost" > /etc/guacamole/guacamole.properties && \
    echo "guacd-port: 4822" >> /etc/guacamole/guacamole.properties && \
    echo "user-mapping: /etc/guacamole/user-mapping.xml" >> /etc/guacamole/guacamole.properties

# Create a simplified user-mapping.xml with just RDP
RUN echo '<?xml version="1.0" encoding="UTF-8"?>' > /etc/guacamole/user-mapping.xml && \
    echo '<user-mapping>' >> /etc/guacamole/user-mapping.xml && \
    echo '    <authorize username="hackbox" password="hackbox">' >> /etc/guacamole/user-mapping.xml && \
    echo '        <connection name="HackBox Desktop">' >> /etc/guacamole/user-mapping.xml && \
    echo '            <protocol>rdp</protocol>' >> /etc/guacamole/user-mapping.xml && \
    echo '            <param name="hostname">localhost</param>' >> /etc/guacamole/user-mapping.xml && \
    echo '            <param name="port">3389</param>' >> /etc/guacamole/user-mapping.xml && \
    echo '            <param name="username">hackbox</param>' >> /etc/guacamole/user-mapping.xml && \
    echo '            <param name="password">hackbox</param>' >> /etc/guacamole/user-mapping.xml && \
    echo '            <param name="ignore-cert">true</param>' >> /etc/guacamole/user-mapping.xml && \
    echo '            <param name="security">any</param>' >> /etc/guacamole/user-mapping.xml && \
    echo '        </connection>' >> /etc/guacamole/user-mapping.xml && \
    echo '    </authorize>' >> /etc/guacamole/user-mapping.xml && \
    echo '</user-mapping>' >> /etc/guacamole/user-mapping.xml

# Configure xrdp
RUN sed -i 's/port=3389/port=3389/g' /etc/xrdp/xrdp.ini
RUN sed -i 's/max_bpp=32/max_bpp=24/g' /etc/xrdp/xrdp.ini
RUN sed -i 's/xserverbpp=24/xserverbpp=24/g' /etc/xrdp/xrdp.ini
RUN sed -i 's/crypt_level=high/crypt_level=none/g' /etc/xrdp/xrdp.ini
RUN sed -i 's/security_layer=negotiate/security_layer=rdp/g' /etc/xrdp/xrdp.ini
RUN sed -i 's/allow_channels=true/allow_channels=false/g' /etc/xrdp/xrdp.ini
RUN sed -i 's/bitmap_compression=true/bitmap_compression=true/g' /etc/xrdp/xrdp.ini
RUN sed -i 's/max_idle_time=0/max_idle_time=0/g' /etc/xrdp/xrdp.ini
RUN sed -i 's/black=000000/black=000000/g' /etc/xrdp/xrdp.ini

# Configure Guacamole
RUN mkdir -p /etc/guacamole/extensions
RUN mkdir -p /etc/guacamole/lib
RUN echo "guacd-hostname: localhost" > /etc/guacamole/guacamole.properties
RUN echo "guacd-port: 4822" >> /etc/guacamole/guacamole.properties
RUN echo "user-mapping: /etc/guacamole/user-mapping.xml" >> /etc/guacamole/guacamole.properties
RUN echo "basic-user-mapping: /etc/guacamole/user-mapping.xml" >> /etc/guacamole/guacamole.properties

# Create user mapping for Guacamole
RUN echo "<user-mapping>" > /etc/guacamole/user-mapping.xml
RUN echo "  <authorize username=\"hackbox\" password=\"hackbox\">" >> /etc/guacamole/user-mapping.xml
RUN echo "    <connection name=\"HackBox Desktop\">" >> /etc/guacamole/user-mapping.xml
RUN echo "      <protocol>rdp</protocol>" >> /etc/guacamole/user-mapping.xml
RUN echo "      <param name=\"hostname\">localhost</param>" >> /etc/guacamole/user-mapping.xml
RUN echo "      <param name=\"port\">3389</param>" >> /etc/guacamole/user-mapping.xml
RUN echo "      <param name=\"username\">hackbox</param>" >> /etc/guacamole/user-mapping.xml
RUN echo "      <param name=\"password\">hackbox</param>" >> /etc/guacamole/user-mapping.xml
RUN echo "      <param name=\"ignore-cert\">true</param>" >> /etc/guacamole/user-mapping.xml
RUN echo "      <param name=\"resize-method\">display-update</param>" >> /etc/guacamole/user-mapping.xml
RUN echo "      <param name=\"color-depth\">24</param>" >> /etc/guacamole/user-mapping.xml
RUN echo "    </connection>" >> /etc/guacamole/user-mapping.xml
RUN echo "  </authorize>" >> /etc/guacamole/user-mapping.xml
RUN echo "</user-mapping>" >> /etc/guacamole/user-mapping.xml

# Create symbolic link for Guacamole configuration
RUN ln -s /etc/guacamole /usr/share/tomcat9/.guacamole

# Set up user for xrdp and SSH
RUN useradd -m -s /bin/bash hackbox
RUN echo "hackbox:hackbox" | chpasswd
RUN usermod -aG sudo hackbox

# Configure SSH
RUN mkdir -p /var/run/sshd
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
RUN sed -i 's/#Port 22/Port 2222/' /etc/ssh/sshd_config
# SSH login fix. Otherwise user is kicked off after login
RUN sed -i 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd

# Configure XFCE as the default session
RUN echo "xfce4-session" > /etc/skel/.Xclients
RUN chmod +x /etc/skel/.Xclients
RUN echo "xfce4-session" > /home/hackbox/.Xclients
RUN chmod +x /home/hackbox/.Xclients
RUN echo "startxfce4" > /home/hackbox/.xsession
RUN chmod +x /home/hackbox/.xsession

# Configure xrdp to use XFCE
RUN echo "#!/bin/sh" > /etc/xrdp/startwm.sh
RUN echo "if [ -r /etc/default/locale ]; then" >> /etc/xrdp/startwm.sh
RUN echo "  . /etc/default/locale" >> /etc/xrdp/startwm.sh
RUN echo "  export LANG LANGUAGE" >> /etc/xrdp/startwm.sh
RUN echo "fi" >> /etc/xrdp/startwm.sh
RUN echo "startxfce4" >> /etc/xrdp/startwm.sh
RUN chmod +x /etc/xrdp/startwm.sh

# Create supervisord.conf file directly
RUN mkdir -p /etc/supervisor/conf.d/
RUN echo '[supervisord]' > /etc/supervisor/conf.d/supervisord.conf
RUN echo 'nodaemon=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'loglevel=info' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:startup]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/app/scripts/startup.sh' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=false' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=0' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'priority=100' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:rdp-setup]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/app/scripts/start-rdp.sh' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=false' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=0' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'priority=90' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:xrdp]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/usr/sbin/xrdp --nodaemon' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stdout_logfile=/var/log/xrdp.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stderr_logfile=/var/log/xrdp-err.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=10' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startretries=5' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stopasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'killasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:xrdp-sesman]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/usr/sbin/xrdp-sesman --nodaemon' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stdout_logfile=/var/log/xrdp-sesman.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stderr_logfile=/var/log/xrdp-sesman-err.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=10' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startretries=5' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stopasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'killasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
# Create a script to start guacd with fallback options
RUN echo '#!/bin/bash' > /app/scripts/start-guacd.sh && \
    echo 'if [ -f /usr/local/sbin/guacd ]; then' >> /app/scripts/start-guacd.sh && \
    echo '  /usr/local/sbin/guacd -f' >> /app/scripts/start-guacd.sh && \
    echo 'elif [ -f /usr/sbin/guacd ]; then' >> /app/scripts/start-guacd.sh && \
    echo '  /usr/sbin/guacd -f' >> /app/scripts/start-guacd.sh && \
    echo 'else' >> /app/scripts/start-guacd.sh && \
    echo '  echo "guacd not found, cannot start"' >> /app/scripts/start-guacd.sh && \
    echo '  sleep infinity' >> /app/scripts/start-guacd.sh && \
    echo 'fi' >> /app/scripts/start-guacd.sh && \
    chmod +x /app/scripts/start-guacd.sh

RUN echo '[program:guacd]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/app/scripts/start-guacd.sh' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stdout_logfile=/var/log/guacd.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stderr_logfile=/var/log/guacd-err.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=10' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startretries=5' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stopasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'killasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:tomcat]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=bash -c "mkdir -p /var/lib/tomcat9/logs && chown -R root:root /var/lib/tomcat9 && /usr/share/tomcat9/bin/catalina.sh run"' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stdout_logfile=/var/log/tomcat.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stderr_logfile=/var/log/tomcat-err.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=10' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startretries=5' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stopasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'killasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:sshd]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/usr/sbin/sshd -D -p 2222' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stdout_logfile=/var/log/sshd.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stderr_logfile=/var/log/sshd-err.log' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=10' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startretries=5' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'stopasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'killasgroup=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:node-server]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=node /app/server/server.js' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'directory=/app' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'priority=10' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'environment=NODE_ENV="production",PORT="5000",GUI_ENABLED="true"' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=5' >> /etc/supervisor/conf.d/supervisord.conf

# Create startup script directly
RUN mkdir -p /app/scripts
RUN echo '#!/bin/bash' > /app/scripts/startup.sh
RUN echo 'echo "Starting HackBox services..."' >> /app/scripts/startup.sh
RUN echo 'echo "Ensuring Node.js server is running for Render.com health checks"' >> /app/scripts/startup.sh
RUN echo 'node /app/server/server.js &' >> /app/scripts/startup.sh
RUN echo 'echo "Node.js server started in background"' >> /app/scripts/startup.sh
RUN chmod +x /app/scripts/startup.sh

# Create health check script for Render.com
RUN echo '#!/bin/bash' > /app/scripts/health-check.sh
RUN echo 'curl -s http://localhost:5000/health || exit 1' >> /app/scripts/health-check.sh
RUN chmod +x /app/scripts/health-check.sh

# Create RDP startup script
RUN echo '#!/bin/bash' > /app/scripts/start-rdp.sh
RUN echo 'echo "Configuring XRDP and Guacamole for Render.com..."' >> /app/scripts/start-rdp.sh
RUN echo 'mkdir -p /var/run/xrdp' >> /app/scripts/start-rdp.sh
RUN echo 'mkdir -p /var/log/xrdp' >> /app/scripts/start-rdp.sh
RUN echo 'touch /var/log/xrdp/xrdp.log' >> /app/scripts/start-rdp.sh
RUN echo 'touch /var/log/xrdp/xrdp-sesman.log' >> /app/scripts/start-rdp.sh
RUN echo 'chown -R root:root /var/run/xrdp' >> /app/scripts/start-rdp.sh
RUN echo 'chown -R root:root /var/log/xrdp' >> /app/scripts/start-rdp.sh
RUN echo 'mkdir -p /var/lib/tomcat9/logs' >> /app/scripts/start-rdp.sh
RUN echo 'chown -R root:root /var/lib/tomcat9' >> /app/scripts/start-rdp.sh
RUN echo 'chmod -R 755 /var/lib/tomcat9' >> /app/scripts/start-rdp.sh
RUN echo 'mkdir -p /usr/share/tomcat9/.guacamole' >> /app/scripts/start-rdp.sh
RUN echo 'ln -sf /etc/guacamole /usr/share/tomcat9/.guacamole' >> /app/scripts/start-rdp.sh
RUN echo 'echo "XRDP and Guacamole configuration complete"' >> /app/scripts/start-rdp.sh
RUN chmod +x /app/scripts/start-rdp.sh

# Create VNC startup script
RUN echo '#!/bin/bash' > /app/scripts/start-vnc.sh

# Create X11 test script
RUN echo '#!/bin/bash' > /app/scripts/test-x11.sh
RUN echo 'export DISPLAY=:1' >> /app/scripts/test-x11.sh
RUN echo 'xmessage -center "X11 is working!" || echo "xmessage failed"' >> /app/scripts/test-x11.sh
RUN chmod +x /app/scripts/test-x11.sh
RUN echo 'export USER=root' >> /app/scripts/start-vnc.sh
RUN echo 'export HOME=/root' >> /app/scripts/start-vnc.sh
RUN echo 'mkdir -p $HOME/.vnc' >> /app/scripts/start-vnc.sh
RUN echo 'echo "hackbox" | vncpasswd -f > $HOME/.vnc/passwd' >> /app/scripts/start-vnc.sh
RUN echo 'chmod 600 $HOME/.vnc/passwd' >> /app/scripts/start-vnc.sh
RUN echo 'cat > $HOME/.vnc/xstartup << EOF' >> /app/scripts/start-vnc.sh
RUN echo '#!/bin/sh' >> /app/scripts/start-vnc.sh
RUN echo 'unset SESSION_MANAGER' >> /app/scripts/start-vnc.sh
RUN echo 'unset DBUS_SESSION_BUS_ADDRESS' >> /app/scripts/start-vnc.sh
RUN echo 'export XKL_XMODMAP_DISABLE=1' >> /app/scripts/start-vnc.sh
RUN echo 'export XDG_CURRENT_DESKTOP=XFCE' >> /app/scripts/start-vnc.sh
RUN echo 'export DISPLAY=:1' >> /app/scripts/start-vnc.sh
RUN echo 'xrdb $HOME/.Xresources' >> /app/scripts/start-vnc.sh
RUN echo 'xsetroot -solid grey' >> /app/scripts/start-vnc.sh
RUN echo 'startxfce4 &' >> /app/scripts/start-vnc.sh
RUN echo 'EOF' >> /app/scripts/start-vnc.sh
RUN echo 'chmod +x $HOME/.vnc/xstartup' >> /app/scripts/start-vnc.sh
RUN echo 'pkill Xtigervnc || true' >> /app/scripts/start-vnc.sh
RUN echo 'pkill Xtightvnc || true' >> /app/scripts/start-vnc.sh
RUN echo 'pkill Xvnc || true' >> /app/scripts/start-vnc.sh
RUN echo 'rm -f /tmp/.X1-lock /tmp/.X11-unix/X1 || true' >> /app/scripts/start-vnc.sh
RUN echo 'echo "Trying TigerVNC first..."' >> /app/scripts/start-vnc.sh
RUN echo 'if command -v tigervncserver &> /dev/null; then' >> /app/scripts/start-vnc.sh
RUN echo '  echo "Starting TigerVNC server..."' >> /app/scripts/start-vnc.sh
RUN echo '  tigervncserver :1 -geometry 1280x800 -depth 24 -localhost no -rfbport 5901 -verbose -logfile /var/log/vnc.log' >> /app/scripts/start-vnc.sh
RUN echo '  VNC_EXIT=$?' >> /app/scripts/start-vnc.sh
RUN echo '  if [ $VNC_EXIT -ne 0 ]; then' >> /app/scripts/start-vnc.sh
RUN echo '    echo "TigerVNC failed with exit code $VNC_EXIT, trying TightVNC..."' >> /app/scripts/start-vnc.sh
RUN echo '    if command -v vncserver &> /dev/null; then' >> /app/scripts/start-vnc.sh
RUN echo '      vncserver :1 -geometry 1280x800 -depth 24 -localhost no -rfbport 5901 -verbose -logfile /var/log/vnc.log' >> /app/scripts/start-vnc.sh
RUN echo '      VNC_EXIT=$?' >> /app/scripts/start-vnc.sh
RUN echo '      if [ $VNC_EXIT -ne 0 ]; then' >> /app/scripts/start-vnc.sh
RUN echo '        echo "TightVNC failed with exit code $VNC_EXIT, trying Xvfb..."' >> /app/scripts/start-vnc.sh
RUN echo '        Xvfb :1 -screen 0 1280x800x24 &' >> /app/scripts/start-vnc.sh
RUN echo '        sleep 2' >> /app/scripts/start-vnc.sh
RUN echo '        x11vnc -display :1 -rfbport 5901 -forever -shared -bg -o /var/log/vnc.log' >> /app/scripts/start-vnc.sh
RUN echo '      fi' >> /app/scripts/start-vnc.sh
RUN echo '    else' >> /app/scripts/start-vnc.sh
RUN echo '      echo "TightVNC not found, trying Xvfb..."' >> /app/scripts/start-vnc.sh
RUN echo '      Xvfb :1 -screen 0 1280x800x24 &' >> /app/scripts/start-vnc.sh
RUN echo '      sleep 2' >> /app/scripts/start-vnc.sh
RUN echo '      x11vnc -display :1 -rfbport 5901 -forever -shared -bg -o /var/log/vnc.log' >> /app/scripts/start-vnc.sh
RUN echo '    fi' >> /app/scripts/start-vnc.sh
RUN echo '  fi' >> /app/scripts/start-vnc.sh
RUN echo 'elif command -v vncserver &> /dev/null; then' >> /app/scripts/start-vnc.sh
RUN echo '  echo "Starting TightVNC server..."' >> /app/scripts/start-vnc.sh
RUN echo '  vncserver :1 -geometry 1280x800 -depth 24 -localhost no -rfbport 5901 -verbose -logfile /var/log/vnc.log' >> /app/scripts/start-vnc.sh
RUN echo '  VNC_EXIT=$?' >> /app/scripts/start-vnc.sh
RUN echo '  if [ $VNC_EXIT -ne 0 ]; then' >> /app/scripts/start-vnc.sh
RUN echo '    echo "TightVNC failed with exit code $VNC_EXIT, trying Xvfb..."' >> /app/scripts/start-vnc.sh
RUN echo '    Xvfb :1 -screen 0 1280x800x24 &' >> /app/scripts/start-vnc.sh
RUN echo '    sleep 2' >> /app/scripts/start-vnc.sh
RUN echo '    x11vnc -display :1 -rfbport 5901 -forever -shared -bg -o /var/log/vnc.log' >> /app/scripts/start-vnc.sh
RUN echo '  fi' >> /app/scripts/start-vnc.sh
RUN echo 'else' >> /app/scripts/start-vnc.sh
RUN echo '  echo "No VNC server found, trying Xvfb..."' >> /app/scripts/start-vnc.sh
RUN echo '  Xvfb :1 -screen 0 1280x800x24 &' >> /app/scripts/start-vnc.sh
RUN echo '  sleep 2' >> /app/scripts/start-vnc.sh
RUN echo '  x11vnc -display :1 -rfbport 5901 -forever -shared -bg -o /var/log/vnc.log' >> /app/scripts/start-vnc.sh
RUN echo 'fi' >> /app/scripts/start-vnc.sh
RUN echo 'echo "VNC server started successfully"' >> /app/scripts/start-vnc.sh
RUN echo 'sleep 5' >> /app/scripts/start-vnc.sh
RUN echo 'export DISPLAY=:1' >> /app/scripts/start-vnc.sh
RUN echo 'xhost +' >> /app/scripts/start-vnc.sh
RUN echo '/app/scripts/test-x11.sh &' >> /app/scripts/start-vnc.sh
RUN echo 'tail -f /var/log/vnc.log' >> /app/scripts/start-vnc.sh
RUN chmod +x /app/scripts/start-vnc.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Clean up any existing VNC processes and lock files' >> /app/scripts/startup.sh
RUN echo 'pkill Xtigervnc || true' >> /app/scripts/startup.sh
RUN echo 'pkill Xtightvnc || true' >> /app/scripts/startup.sh
RUN echo 'pkill Xvnc || true' >> /app/scripts/startup.sh
RUN echo 'rm -f /tmp/.X1-lock /tmp/.X11-unix/X1 || true' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create VNC config' >> /app/scripts/startup.sh
RUN echo 'mkdir -p ~/.vnc' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create xstartup file' >> /app/scripts/startup.sh
RUN echo 'echo "#!/bin/sh" > ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo 'echo "unset SESSION_MANAGER" >> ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo 'echo "unset DBUS_SESSION_BUS_ADDRESS" >> ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo 'echo "export XKL_XMODMAP_DISABLE=1" >> ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo 'echo "export XDG_CURRENT_DESKTOP=XFCE" >> ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo 'echo "exec startxfce4" >> ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo 'chmod +x ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Set up XFCE theme' >> /app/scripts/startup.sh
RUN echo 'mkdir -p ~/.config/xfce4/xfconf/xfce-perchannel-xml/' >> /app/scripts/startup.sh
RUN echo 'echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "<channel name=\"xsettings\" version=\"1.0\">" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "  <property name=\"Net\" type=\"empty\">" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "    <property name=\"ThemeName\" type=\"string\" value=\"Adwaita-dark\"/>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "    <property name=\"IconThemeName\" type=\"string\" value=\"Adwaita\"/>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "  </property>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "  <property name=\"Gtk\" type=\"empty\">" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "    <property name=\"CursorThemeName\" type=\"string\" value=\"Adwaita\"/>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "    <property name=\"CursorThemeSize\" type=\"int\" value=\"24\"/>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "  </property>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "</channel>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create a desktop shortcut for terminal' >> /app/scripts/startup.sh
RUN echo 'mkdir -p ~/Desktop' >> /app/scripts/startup.sh
RUN echo 'echo "[Desktop Entry]" > ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Version=1.0" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Type=Application" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Name=Terminal" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Comment=Terminal Emulator" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Exec=xfce4-terminal" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Icon=utilities-terminal" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Path=" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Terminal=false" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "StartupNotify=false" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo 'chmod +x ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create a desktop shortcut for Firefox' >> /app/scripts/startup.sh
RUN echo 'echo "[Desktop Entry]" > ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Version=1.0" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Type=Application" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Name=Firefox" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Comment=Web Browser" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Exec=firefox" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Icon=firefox" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Path=" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Terminal=false" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "StartupNotify=false" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo 'chmod +x ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create a welcome message' >> /app/scripts/startup.sh
RUN echo 'mkdir -p ~/Documents' >> /app/scripts/startup.sh
RUN echo 'echo "Welcome to HackBox!" > ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "This is a virtual Linux environment with a graphical desktop." >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "You can use this environment to:" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "- Browse the web with Firefox" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "- Use the terminal" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "- Create and edit files" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "- Run applications" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "Enjoy your session!" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo 'echo "Startup script completed"' >> /app/scripts/startup.sh
RUN chmod +x /app/scripts/startup.sh

# Set up noVNC
RUN mkdir -p /app/novnc
RUN ln -s /usr/share/novnc /app/novnc/
RUN ln -s /usr/lib/novnc/utils /app/novnc/utils

WORKDIR /app

# Copy server from server-builder stage
COPY --from=server-builder /app/server ./server

# Install proxy packages
WORKDIR /app/server
RUN npm install http-proxy@1.18.1 http-proxy-middleware@2.0.6
WORKDIR /app

# Copy client build from client-builder stage
COPY --from=client-builder /app/client/build ./client/build

# Verify directories and files exist
RUN echo "Checking server directory:" && \
    ls -la server/ && \
    echo "Checking for server.js:" && \
    ls -la server/server.js && \
    echo "Checking client build:" && \
    ls -la client/build || echo "Build directory not found!"

# Note: The server.js file has been directly updated with custom domain information
# for both GUI access and SSH access endpoints

# Expose ports
EXPOSE 5000 3389 8080 2222 10000

# Set environment variables
ENV NODE_ENV=production
ENV GUI_ENABLED=true
ENV RDP_PORT=3389
ENV PORT=5000

# Start the Node.js server first, then supervisord
CMD ["bash", "-c", "node /app/server/server.js & sleep 2 && /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf"]