# Complete Dockerfile with VNC support for Render.com

# Build stage for client
FROM node:18 AS client-builder

WORKDIR /app/client

# Copy client package.json files
COPY client/package*.json ./

# Install all client dependencies including dev dependencies
RUN npm install

# Copy client source code
COPY client ./

# Build client with increased memory limit for local build
RUN NODE_OPTIONS="--max_old_space_size=8192" npm run build

# Build stage for server
FROM node:18 AS server-builder

WORKDIR /app/server

# Copy server package.json files
COPY server/package*.json ./

# Install build dependencies for node-pty
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    && ln -s /usr/bin/python3 /usr/bin/python

# Install all server dependencies
RUN npm install

# Copy server source code
COPY server/ ./

# Final stage with VNC support
FROM ubuntu:22.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install Node.js
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean

# Install VNC, XFCE, and required tools
RUN apt-get update && apt-get install -y \
    xfce4 \
    xfce4-terminal \
    xfce4-goodies \
    tightvncserver \
    novnc \
    websockify \
    net-tools \
    supervisor \
    nano \
    wget \
    firefox \
    python3 \
    python3-pip \
    make \
    g++ \
    && apt-get clean

# Set up VNC password
RUN mkdir -p /root/.vnc
RUN echo "hackbox" | vncpasswd -f > /root/.vnc/passwd
RUN chmod 600 /root/.vnc/passwd

# Create supervisord.conf file directly
RUN mkdir -p /etc/supervisor/conf.d/
RUN echo '[supervisord]' > /etc/supervisor/conf.d/supervisord.conf
RUN echo 'nodaemon=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'loglevel=info' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:startup]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/app/scripts/startup.sh' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=false' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'startsecs=0' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'priority=100' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:vncserver]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/usr/bin/vncserver :1 -geometry 1280x800 -depth 24 -localhost no' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'environment=HOME="/root",USER="root"' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:novnc]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=/usr/share/novnc/utils/launch.sh --vnc localhost:5901 --listen 6080' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'priority=200' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo '[program:node-server]' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'command=node /app/server/server.js' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'directory=/app' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'priority=300' >> /etc/supervisor/conf.d/supervisord.conf
RUN echo 'environment=NODE_ENV="production",PORT="5000"' >> /etc/supervisor/conf.d/supervisord.conf

# Create startup script directly
RUN mkdir -p /app/scripts
RUN echo '#!/bin/bash' > /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create VNC config' >> /app/scripts/startup.sh
RUN echo 'mkdir -p ~/.vnc' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create xstartup file' >> /app/scripts/startup.sh
RUN echo 'echo "#!/bin/sh" > ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo 'echo "unset SESSION_MANAGER" >> ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo 'echo "unset DBUS_SESSION_BUS_ADDRESS" >> ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo 'echo "startxfce4 &" >> ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo 'chmod +x ~/.vnc/xstartup' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Set up XFCE theme' >> /app/scripts/startup.sh
RUN echo 'mkdir -p ~/.config/xfce4/xfconf/xfce-perchannel-xml/' >> /app/scripts/startup.sh
RUN echo 'echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "<channel name=\"xsettings\" version=\"1.0\">" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "  <property name=\"Net\" type=\"empty\">" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "    <property name=\"ThemeName\" type=\"string\" value=\"Adwaita-dark\"/>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "    <property name=\"IconThemeName\" type=\"string\" value=\"Adwaita\"/>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "  </property>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "  <property name=\"Gtk\" type=\"empty\">" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "    <property name=\"CursorThemeName\" type=\"string\" value=\"Adwaita\"/>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "    <property name=\"CursorThemeSize\" type=\"int\" value=\"24\"/>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "  </property>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo 'echo "</channel>" >> ~/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create a desktop shortcut for terminal' >> /app/scripts/startup.sh
RUN echo 'mkdir -p ~/Desktop' >> /app/scripts/startup.sh
RUN echo 'echo "[Desktop Entry]" > ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Version=1.0" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Type=Application" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Name=Terminal" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Comment=Terminal Emulator" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Exec=xfce4-terminal" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Icon=utilities-terminal" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Path=" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Terminal=false" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "StartupNotify=false" >> ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo 'chmod +x ~/Desktop/Terminal.desktop' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create a desktop shortcut for Firefox' >> /app/scripts/startup.sh
RUN echo 'echo "[Desktop Entry]" > ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Version=1.0" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Type=Application" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Name=Firefox" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Comment=Web Browser" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Exec=firefox" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Icon=firefox" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Path=" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "Terminal=false" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo 'echo "StartupNotify=false" >> ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo 'chmod +x ~/Desktop/Firefox.desktop' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo '# Create a welcome message' >> /app/scripts/startup.sh
RUN echo 'mkdir -p ~/Documents' >> /app/scripts/startup.sh
RUN echo 'echo "Welcome to HackBox!" > ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "This is a virtual Linux environment with a graphical desktop." >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "You can use this environment to:" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "- Browse the web with Firefox" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "- Use the terminal" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "- Create and edit files" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "- Run applications" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo 'echo "Enjoy your session!" >> ~/Documents/welcome.txt' >> /app/scripts/startup.sh
RUN echo '' >> /app/scripts/startup.sh
RUN echo 'echo "Startup script completed"' >> /app/scripts/startup.sh
RUN chmod +x /app/scripts/startup.sh

# Set up noVNC
RUN mkdir -p /app/novnc
RUN ln -s /usr/share/novnc /app/novnc/
RUN ln -s /usr/lib/novnc/utils /app/novnc/utils

WORKDIR /app

# Copy server from server-builder stage
COPY --from=server-builder /app/server ./server

# Copy client build from client-builder stage
COPY --from=client-builder /app/client/build ./client/build

# Verify directories and files exist
RUN echo "Checking server directory:" && \
    ls -la server/ && \
    echo "Checking for server.js:" && \
    ls -la server/server.js && \
    echo "Checking client build:" && \
    ls -la client/build || echo "Build directory not found!"

# Update the VNC endpoint in server.js
RUN sed -i 's/available: false/available: true/g' /app/server/server.js
RUN sed -i 's/message: .*/message: "GUI access is available via VNC",/g' /app/server/server.js
RUN sed -i 's/note: .*/url: "\/novnc\/vnc.html?host=" + req.headers.host + "\&port=6080",\n      password: "hackbox"/g' /app/server/server.js

# Expose ports
EXPOSE 5000 6080 5901 10000

# Set NODE_ENV to production
ENV NODE_ENV=production
ENV VNC_ENABLED=true

# Start services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]